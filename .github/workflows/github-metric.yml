name: GitHub Metrics for All Repos

on:
  workflow_dispatch:
    inputs:
      number_of_days:
        description: 'Number of days to fetch data for (e.g., 30)'
        required: true
        default: '30'
      metric:
        description: 'Metric to display'
        required: true
        default: 'commits'
        type: choice
        options:
          - commits
          - issues
          - prs

permissions:
  contents: read
  issues: read
  pull-requests: read
  actions: read

jobs:
  fetch_and_process_repos:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch all repositories
        id: fetch_repos
        run: |
          REPOS=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/user/repos?per_page=100" | jq -r '.[].name')
          echo "Fetched repositories: $REPOS"
          echo "REPOS=$(echo $REPOS | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Generate GitHub metrics report
        run: |
          NUMBER_OF_DAYS="${{ github.event.inputs.number_of_days }}"
          METRIC="${{ github.event.inputs.metric }}"
          OWNER="${{ github.repository_owner }}"
          IFS=' ' read -r -a REPO_ARRAY <<< "$REPOS"
          for REPO in "${REPO_ARRAY[@]}"; do
            if [ -z "$REPO" ]; then
              echo "Skipping empty repository name"
              continue
            fi
            SINCE=$(date -u -d "$NUMBER_OF_DAYS days ago" +"%Y-%m-%dT%H:%M:%SZ")
            echo "ðŸ“Š GitHub Metrics for $REPO" >> metrics_report.txt
            
            if [ "$METRIC" = "commits" ]; then
              echo "ðŸ”„ Fetching commit count..." >> metrics_report.txt
              COMMIT_COUNT=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/$OWNER/$REPO/commits?since=$SINCE" | jq length)
              echo "- Commits in last $NUMBER_OF_DAYS days: $COMMIT_COUNT" >> metrics_report.txt
              
              echo "ðŸ“‹ Fetching commit details..." >> metrics_report.txt
              curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/$OWNER/$REPO/commits?since=$SINCE&per_page=5" | jq '.[] | {author: .commit.author.name, message: .commit.message, date: .commit.author.date}' >> metrics_report.txt
            elif [ "$METRIC" = "issues" ]; then
              echo "ðŸ“‚ Fetching open issue count..." >> metrics_report.txt
              ISSUE_COUNT=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/$OWNER/$REPO/issues?state=open&since=$SINCE" | jq length)
              echo "- Open Issues: $ISSUE_COUNT" >> metrics_report.txt
              
              echo "ðŸ“‹ Fetching open issue details..." >> metrics_report.txt
              curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/$OWNER/$REPO/issues?state=open&since=$SINCE" | jq '.[] | {title: .title, user: .user.login, created_at: .created_at}' >> metrics_report.txt
            elif [ "$METRIC" = "prs" ]; then
              echo "ðŸ”ƒ Fetching open pull request count..." >> metrics_report.txt
              PR_COUNT=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/$OWNER/$REPO/pulls?state=open&since=$SINCE" | jq length)
              echo "- Open Pull Requests: $PR_COUNT" >> metrics_report.txt
              
              echo "ðŸ“‹ Fetching open pull request details..." >> metrics_report.txt
              curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/$OWNER/$REPO/pulls?state=open&since=$SINCE" | jq '.[] | {title: .title, user: .user.login, created_at: .created_at}' >> metrics_report.txt
            else
              echo "Invalid metric selected. Please choose 'commits', 'issues', or 'prs'." >> metrics_report.txt
            fi
          done

      - name: Upload metrics report
        uses: actions/upload-artifact@v4
        with:
          name: metrics-report
          path: metrics_report.txt
